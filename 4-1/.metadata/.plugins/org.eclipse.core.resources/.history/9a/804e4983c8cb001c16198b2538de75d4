/*
 * albumesArtistasMusicales.c
 *
 *  Created on: 4 may 2022
 *      Author: Cajlo
 */


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <string.h>
#include "personalio.h"
#include "albumesArtistasMusicales.h"

int buscaEstado(eAlbum estructura[], int longitud, int estadoBuscado){

	int i, retorno=-1;


	for( i=0; i<longitud; i++ ){
		if( estructura[i].estado == estadoBuscado ){
			retorno=i;

			break;
		}
	}

	return retorno;

}

int hardCodeAlbum(eAlbum estructura[], int longitud, int id){


	int indice;
	int retorno=0;


	indice= buscaEstado( estructura, longitud, 0 );

	if (indice!= -1)
	{
		//se recibe el ID desde el main
		estructura[indice].id= id;

		//titulo del album
		strcpy(estructura[indice].descripcion, "hardCode");

		//precio del album
			estructura[indice].precio= id+100;

		//año

				estructura[indice].fechaPublicacion.aaaa= id+2000;


				estructura[indice].fechaPublicacion.mm= 1;


				estructura[indice].fechaPublicacion.dd= 1;

				retorno=1;
	}

	return retorno;
}

eAlbum alta(int id){

	eAlbum ticket;
	int flag;

	//se recibe el ID desde el main
	ticket.id= id;

	//titulo del album
	stringScan( ticket.descripcion, AAM_TAM_DESC, "ingrese titulo del album: ");

	//precio del album
	flag=0;
	do
	{
		if( flag!=0 )
		{
			printf("\n error, precio debe ser mayor que 0. ");
		}
		ticket.precio= floatScan("precio: ");

		flag=1;

	}while( !floatVerify(ticket.precio, 1, 0) );







	printf("\nDatos de fecha de publicacion");

	//año
	flag=0;
	do
		{
			if( flag!=0 )
			{
				printf("\n error, año debe ser mayor que 1970. ");
			}
			ticket.fechaPublicacion.aaaa= intScan("ingrese año (AAAA): ");

			flag=1;

		}while( mayorQue(ticket.fechaPublicacion.aaaa, 1970 ) );

	//mes
	flag=0;
	do
		{
			if( flag!=0 )
			{
				printf("\n error, mes debe ser un numero entre 1 y 12. ");
			}
			ticket.fechaPublicacion.mm= intScan("ingrese mes (MM): ");

			flag=1;

		}while( intVerify(ticket.fechaPublicacion.mm, 1, 12) );

	//dia
	flag=0;
	do
		{
			if( flag!=0 )
			{
				printf("\n error, dia debe ser un numero entre 1 y 31. ");
			}
			ticket.fechaPublicacion.dd= intScan("ingrese dia (DD): ");

			flag=1;

		}while( intVerify(ticket.fechaPublicacion.dd, 1, 31) );


	return ticket;
}


int buscaAlbumID(eAlbum estructura[], int longitud, char *mensaje){

	int idBuscada, i, retorno=-1;

	idBuscada=intScan( mensaje );

	for( i=0; i<longitud; i++ ){
		if( estructura[i].id == idBuscada ){
			retorno=i;

			break;
		}
	}

	return retorno;

}


void MostrarUnAlbum(eAlbum unAlbum){



	printf("\nidAlbum: %d \tdescripcion: %s \tprecio: $ %.2f", unAlbum.id, unAlbum.descripcion, unAlbum.precio);

}


void modificarUnAlbum(eAlbum estructura[], int indice){

	int flag, opcion;

	do{
		printf("\nha seleccionado la estructura:\n");
		MostrarUnAlbum( estructura[indice] );


		printf("\nque desea modificar?");
		opcion = intScan( "\n\nMENU\n1. Titulo\n2. Fecha de publicacion \n3. Importe \n\n\t4. Salir" );


		switch( opcion ){

		case 1:
			stringScan( estructura[indice].descripcion, AAM_TAM_DESC, "ingrese titulo del album: ");
			break;

		case 2:

			//año
			flag=0;
			do
				{
					if( flag!=0 )
					{
						printf("\n error, año debe ser mayor que 1970. ");
					}
					estructura[indice].fechaPublicacion.aaaa= intScan("ingrese año (AAAA): ");

					flag=1;

				}while( mayorQue(estructura[indice].fechaPublicacion.aaaa, 1970 ) );

			//mes
			flag=0;
			do
				{
					if( flag!=0 )
					{
						printf("\n error, mes debe ser un numero entre 1 y 12. ");
					}
					estructura[indice].fechaPublicacion.mm= intScan("ingrese mes (MM): ");

					flag=1;

				}while( intVerify(estructura[indice].fechaPublicacion.mm, 1, 12) );

			//dia
			flag=0;
			do
				{
					if( flag!=0 )
					{
						printf("\n error, dia debe ser un numero entre 1 y 31. ");
					}
					estructura[indice].fechaPublicacion.dd= intScan("ingrese dia (DD): ");

					flag=1;

				}while( intVerify(estructura[indice].fechaPublicacion.dd, 1, 31) );


			break;

		case 3:

			//precio del album
			flag=0;
			do
			{
				if( flag!=0 )
				{
					printf("\n error, precio debe ser mayor que 0. ");
				}
				estructura[indice].precio= floatScan("precio: ");

				flag=1;

			}while( !floatVerify(estructura[indice].precio, 1, 0) );

			break;

		case 4:
			printf("Saliendo de modificar...");
			break;

		default:
				printf("La opcion ingresada es incorrecta..");

		}
	}while( opcion!=4 );

}



int bajaAlbumID(eAlbum estructura[], int longitud){
	int indice;
	int retorno=0;


	indice=buscaAlbumID(estructura, longitud, "\nIngrese el numero de ID del album a dar de baja_ ");

	if ( indice==-1 ){
		printf("\nEl ID solicitado no existe.");
	}
	else if( estructura[indice].estado==-1 ){
		printf("\nEl ID solicitado ya fue dado de baja con anterioridad.");

	}
	else if( estructura[indice].estado==1 ){

		estructura[indice].estado=-1;
		printf("\nEl ID solicitado acaba de ser dado de baja.");
		retorno=1;

	}

	return retorno;
}


float totalPrecioAlbumes(eAlbum albumes[], int longitud){

	int i;
	float total=0;

	for( i=0; i<longitud; i++ )
	{
		//se determina los datos a usar segun su estado
		if( albumes[i].estado==1 )
		{
			total+= albumes[i].precio;

		}


	}


	return total;
}

void mostrarVariosAlbumes(eAlbum arregloDeProductos[], int longitud){

	int i;

	for( i=0; i<longitud; i++ ){
		if( arregloDeProductos[i].estado == 1 ){
			MostrarUnAlbum( arregloDeProductos[i] );
		}
	}

}


void mostrarAlbumMasBaratoQue(eAlbum arregloDeProductos[], int longitud, float precio){

	int i;


	for( i=0; i<longitud; i++ )
	{
		if( arregloDeProductos[i].estado==1  && mayorQue( precio, arregloDeProductos[i].precio ) )
		{
			MostrarUnAlbum( arregloDeProductos[i] );
		}
	}


}


void mostrarAlbumQueSalioLuegoDel2000(eAlbum arregloDeProductos[], int longitud){

	int i;


	for( i=0; i<longitud; i++ )
	{




		if( arregloDeProductos[i].estado==1  && mayorQue( arregloDeProductos[i].fechaPublicacion.aaaa, 1999 ) )
		{

			MostrarUnAlbum( arregloDeProductos[i] );

		}
	}


}


void informeA(eAlbum albumes[], int longitud, int contadorAlbumes){
	//A. Total y promedio de los importes, y cuántos álbumes no superan ese promedio.
	float total;
	float promedio;

	total= totalPrecioAlbumes( albumes, longitud );

	promedio= basicMath(total, contadorAlbumes, '/');

	printf("\nAl momento se tienen %d albumes en existencia y un precio promedio de $%.2f", contadorAlbumes, promedio);

	printf("\nLos albumes por debajo de ese precio son: ");


	mostrarAlbumMasBaratoQue(albumes,  longitud,  promedio);

}


void mostrarUnaDiscografia(eDiscografia unDisco){



	printf("\nidDiscografiam: %d \tdescripcion: %s", unDisco.id, unDisco.descripcion);

}


void mostrarVariasDiscografias(eDiscografia arreglo[], int lonDiscografia){

	int i;

	for( i=0; i<lonDiscografia; i++ ){

		mostrarUnaDiscografia( arreglo[i] );

	}

}


void mostrarUnTipoArtista(eTipoArtista unTipo){



	printf("\nidTipo: %d \tdescripcion: %s", unTipo.id, unTipo.descripcion);

}


void mostrarVariosTiposArtistas(eTipoArtista arreglo[], int lonArtistas){

	int i;

	for( i=0; i<lonArtistas; i++ ){

		mostrarUnTipoArtista( arreglo[i] );

	}

}
